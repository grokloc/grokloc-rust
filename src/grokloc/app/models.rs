//! models contains cross-model definitions
use std::fmt;

/// Err covers various generic model errors
#[derive(Debug, PartialEq)]
pub enum Err {
    UnknownStatus,
}

impl fmt::Display for Err {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        // {:?} -> just use debug formatter generated by #[derive(Debug)]
        write!(f, "{:?}", self)
    }
}

/// Status describes model status
#[derive(Copy, Clone, Debug, PartialEq)]
#[allow(dead_code)]
pub enum Status {
    Unconfirmed,
    Active,
    Inactive,
}

impl fmt::Display for Status {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        // {:?} -> just use debug formatter generated by #[derive(Debug)]
        write!(f, "{:?}", self)
    }
}

impl Status {
    /// translate a Status to its database representation
    #[allow(dead_code)]
    fn to_int(self) -> i64 {
        match self {
            Status::Unconfirmed => 1,
            Status::Active => 2,
            Status::Inactive => 3,
        }
    }

    /// translate a Status from its database representation
    #[allow(dead_code)]
    fn from_int(i: i64) -> Result<Self, Err> {
        match i {
            1 => Ok(Status::Unconfirmed),
            2 => Ok(Status::Active),
            3 => Ok(Status::Inactive),
            _ => Err(Err::UnknownStatus),
        }
    }
}
